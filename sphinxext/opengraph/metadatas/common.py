from typing import Annotated, Any, Dict
import docutils.nodes as nodes
from sphinx.application import Sphinx

from ..parsers.descriptionparser import get_description
from ..parsers.titleparser import get_title

from urllib.parse import urljoin

from pathlib import Path
from ..metadata import Availability, parameter, Required

class Common:
    site_name: parameter(str, "name of the website.")
    site_url: parameter(str, "url to the root of the website.")
    page_url: parameter(str, "url to the page being built", required=Required.NOT_RECOMMENDED, availability=Availability.PAGE)
    title: parameter(str, "title of the page. Defaults to being autogenerated per-page.", required=Required.NOT_RECOMMENDED)
    description_length: parameter(int, "length of the description parsed from the contents", 200)
    image: parameter(str, "link to image to show")
    image_alt: parameter(str, "alt text for the image. Defaults to using `site_name` or `title`")
    video: parameter(str, "link to video to show", availability=Availability.PAGE)
    video_alt: parameter(str, "alt text for the video", availability=Availability.PAGE)
    audio: parameter(str, "link to audio to play", availability=Availability.PAGE)
    audio_alt: parameter(str, "alt text for the audio", availability=Availability.PAGE)

    description: parameter(str, "description of the page being built. Defaults to being autogenerated per-page.", required=Required.NOT_RECOMMENDED)
    use_first_image: parameter(bool, "Whether to auto-detect and use the first image in each page as `image`. Uses `image` if no image is found.")


    def __init__(self, app: Sphinx, pagename: str, templatename: str, context: Dict[str, Any], doctree: nodes.document, config: Dict[str, Any]):
        self.app = app
        self.pagename = pagename
        self.templatename = templatename
        self.context = context
        self.doctree = doctree
        self.config = config

        for name in self.__annotations__:
            if name in config:
                setattr(self, name, config[name])

        self.fill()

    def fill(self) -> None:
        
        if not self.page_url:
            self.page_url = urljoin(
                self.site_url, self.context["pagename"] + self.context["file_suffix"]
            )

        # Title
        # Get the title and parse any html in it
        title = get_title(self.context["title"], skip_html_tags=False)
        title_excluding_html = get_title(self.context["title"], skip_html_tags=True)
        
        if not self.title:
            self.title = title

        # Description
        if not (isinstance(self.description_length, int) and self.description_length > 0):
            self.description_length = self.get_default("description_length")

        # Parse/walk doctree for metadata (tag/description)
        if not self.description:
            self.description = get_description(self.doctree, self.description_length, [title, title_excluding_html])

        # Image
        self.use_first_image = self.use_first_image or False
        
        if self.use_first_image:
            first_image = self.doctree.next_node(nodes.image)
            self.image = first_image["uri"]
            self.image_alt = first_image.get("alt", None)

        if self.image and not self.image_alt:
            self.image_alt = self.site_name or self.title

        